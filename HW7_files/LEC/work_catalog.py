""" Операции по работе с файлами и папками должны иметь полный, абсолютный путь
к объекту начиная от корневой директории. Или же можно задать относительный
путь. Так мы делали в первой части лекции. Файл с кодом и файлы для чтения и
записи находились в одном каталоге.


● Текущий каталог
Для получения информации о текущем каталоге можно использовать модуль os или
pathlib """

import os
from pathlib import Path

""" 
print(os.getcwd())
print(Path.cwd()) """

""" Обычно текущим является каталог из которого был запущен python.
Для изменения текущего каталога можно воспользоваться функцией os.chdir. Она
принимает на вход абсолютный или относительный путь до нового текущего
каталога. """


""" print(os.getcwd())
print(Path.cwd())
os.chdir('../..')
print(os.getcwd())
print(Path.cwd()) """


""" ● Создание каталогов
Для создания каталога снова можно воспользоваться двумя модулями """

""" 
os.mkdir('new_os_dir')
Path('new_path_dir').mkdir() """


""" Представленный код создаёт каталог в текущей директории. А если необходимо
создать несколько вложенных друг в друга каталогов, код будет следующим: """


""" os.makedirs('dir/other_dir/new_os_dir')
#Path('some_dir/dir/new_path_dir').mkdir() # FileNotFoundError
Path('some_dir/dir/new_path_dir').mkdir(parents=True) """


""" Модуль os предоставляет другую функцию — makedirs. Модуль path работает с тем
же методом mkdir. Но если в цепочке каталогов будет несуществующий, получим
ошибку FileNotFoundError. Дополнительный параметр parents=True указывает на
необходимость создать всех недостающих родительских каталогов. """


""" ● Удаление каталогов
Для удаления одного каталога подойдут следующие функция и метод """


""" """ # os.rmdir('dir') # OSError
# Path('some_dir').rmdir() # OSError
""" os.rmdir('dir/other_dir/new_os_dir')
Path('some_dir/dir/new_path_dir').rmdir() """

""" Важно! Удалить можно лишь пустой каталог. Если внутри удаляемого
каталога есть другие каталоги или файлы, возникнет ошибка OSError.
Обратите внимание, что при передаче цепочки каталогов удаляется один,
последний из перечисленных. Родительские каталоги остаются без изменений.
Если необходимо удалить каталог со всем его содержимым (вложенные каталоги и
файлы), подойдёт функция из модуля shutil """

import shutil


""" shutil.rmtree('dir/other_dir')
shutil.rmtree('some_dir') """


""" В первом случае будет удалена директория other_dir со всем содержимым.
Директория dir останется на месте.
Во втором случае удаляется каталог some_dir и его содержимое. """


""" Формирование пути
В операционной системе Windows для указания пути используется обратный слеш \.
В Unix системах путь разделяется слешем. Чтобы программа работала одинаково на
любой ОС рекомендуется использовать специальную функцию join из os.path для
склеивания путей.
Модуль pathlib использует более понятный приём с переопределением операции
деления. """


file_1 = os.path.join(os.getcwd(), 'dir', 'new_file.txt')
print(f'{file_1 = }\n{file_1}')

file_2 = Path().cwd() / 'dir' / 'new_file.txt'
print(f'{file_2 = }\n{file_2}')


""" Оба варианта используют разные способы получения результата и хранения
информации. Но результат мы получили один и тот же — путь до файла new_file.txt в
каталоге dir текущего каталога. """

